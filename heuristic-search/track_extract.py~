#import sys
#sys.path.append("../")
from landscape import state
from landscape import action
from landscape import structured_space

f = open("ring-1.track")

line = f.readline()
track = []

while line != "":
    line = f.readline()
    split_line = []
    for x in line:
            if x != "\n":
                split_line.append(x)
    if len(split_line) != 0:
        track.append(split_line)
            
#print track

width = len(track[0])
length = len(track)

   
index_to_states = dict([])
states_to_indexes = dict([])

start_state = None

for i in range(width*length):
    l_index = i/width
    w_index = i - l_index*width
    
    if track[l_index][w_index] != 'x':
        s = state()
        index_to_states[i] = s
        states_to_indexes[s] = i
        if track[l_index][w_index] == "s":
            start_state = s
            
        if track[l_index][w_index] == "g":
            s.set_goal()
            

for index in index_to_states:
    
    successors = []
    
    if index - width >= 0:
        if index - width in index_to_states:    
            upper_state = index_to_states[index-width]
            successors.append(upper_state)
            a = action(1, [1], [upper_state])
            index_to_states[index].append_action(a)

    if index + width < width*length:
        if index+width in index_to_states:
            lower_state = index_to_states[index+width]
            successors.append(lower_state)
            a = action(1, [1], [lower_state])
            index_to_states[index].append_action(a)

    if (index + 1) % width != 0:
        if index + 1 in index_to_states:
            right_state = index_to_states[index+1]
            successors.append(right_state)
            a = action(1, [1], [right_state])
            index_to_states[index].append_action(a)

    if (index-1) % width != -1:
        if index - 1 in index_to_states:
            left_state = index_to_states[index-1]
            successors.append(left_state)
            a = action(1, [1], [left_state])
            index_to_states[index].append_action(a)
    
class trackDisplay:
    def __init__(self, Width, Length):
    ### consider creating an init method
        self.print_board = [[" " for i in range(Width)] for j in range(Length)]

    def update(self, newstate):
        for index in index_to_states:
            char = 'x'
            if newstate == index_to_states[index]:
                char = '0'
            self.print_board[index/length][index-index/length*length] = char

    def printdisplay(self):
        for row in self.print_board:
            line = ""
            for char in row:
                line += char
            print line


t = trackDisplay(width, length)
#print t.print_board
t.printdisplay()
t.update(start_state)
#print t.print_board
t.printdisplay()

states = index_to_states.values()

space = structured_space(states, start_state)

space.restart_heuristic()

print "number of states"
print len(index_to_states)

while not space.have_residuals_converged(0.001):
    print space.simulate_space_lrta(start_state)




space.restart_heuristic()

while not space.have_residuals_converged(0.001):
    print space.simulate_space_lrtak(90, start_state)
